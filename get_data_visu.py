#!/usr/bin/env python
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import pandas as pd 
import numpy as np
import json
import sys
import os
import pickle
import argparse



def scale_coords(coords, width=800, height=800):
    minx = min(coords[:,0])
    miny = min(coords[:,1])
    maxx = max(coords[:,0])
    maxy = max(coords[:,1])

    scale_x = width / (maxx - minx)
    scale_y = height / (maxy - miny)
    print(scale_x, scale_y, minx, miny, maxx, maxy)
    scaled = []
    for i in range(coords.shape[0]):
        x = coords[i,0]
        y = coords[i,1]
        scaled.append([(x - minx) * scale_x, (y - miny) * scale_y])
    return scaled


def process_features(df, pca_components, perplexity, output_file):
    data = np.array(list(df['features']))
#    images = list(df['images'])

    pca = PCA(n_components=pca_components, whiten=True)
    tsne = TSNE(n_components=2)

    data = pca.fit_transform(data)
    data_tsne = tsne.fit_transform(data)
    scaled_data = scale_coords(data_tsne, width=800, height=800)

    data_json = []
    for idx, row in df.iterrows():
        x = scaled_data[idx][0]
        y = scaled_data[idx][1]
        data_json.append([x, y, row['local_thumb'], row['local_image']])

    # str_json = 'datasets/xpca.json'
    json.dump(data_json, open(output_file,'w'))


def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_file', help="input file generated by get_features_from_cnn.py", default="./cnn_posters_features.p")
    parser.add_argument('-o', '--output_file', help="output json file used by d3js", default='./datasets/x.json')
    parser.add_argument('-n', '--pca_components', help="number of PCA components for data reduction", default=1000, type=int)
    parser.add_argument('-p', '--perplexity', help="perplexity for TSNE", default=30, type=int)
    args = parser.parse_args()

    df = pickle.load(open(args.input_file,'rb'))

    process_features(df, args.pca_components, args.perplexity, args.output_file)



if __name__ == "__main__":
   main(sys.argv[1:])
